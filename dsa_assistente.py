# Estudo de Caso 1 - DSA AI Coder - Criando Seu Assistente de Programa√ß√£o Python, em Python

# Importa m√≥dulo para interagir com o sistema operacional
import os

# Importa a biblioteca Streamlit para criar a interface web interativa
import streamlit as st

# Importa a classe Groq para se conectar √† API da plataforma Groq e acessar o LLM
from groq import Groq

# Configura a p√°gina do Streamlit com t√≠tulo, √≠cone, layout e estado inicial da sidebar
st.set_page_config(
    page_title="DSA AI Coder",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Define um prompt de sistema que descreve as regras e comportamento do assistente de IA
CUSTOM_PROMPT = """
Voc√™ √© o "DSA Coder", um assistente de IA especialista em programa√ß√£o, com foco principal em Python. Sua miss√£o √© ajudar desenvolvedores iniciantes com d√∫vidas de programa√ß√£o de forma clara, precisa e √∫til.

REGRAS DE OPERA√á√ÉO:
1.  **Foco em Programa√ß√£o**: Responda apenas a perguntas relacionadas a programa√ß√£o, algoritmos, estruturas de dados, bibliotecas e frameworks. Se o usu√°rio perguntar sobre outro assunto, responda educadamente que seu foco √© exclusivamente em auxiliar com c√≥digo.
2.  **Estrutura da Resposta**: Sempre formate suas respostas da seguinte maneira:
    * **Explica√ß√£o Clara**: Comece com uma explica√ß√£o conceitual sobre o t√≥pico perguntado. Seja direto e did√°tico.
    * **Exemplo de C√≥digo**: Forne√ßa um ou mais blocos de c√≥digo em Python com a sintaxe correta. O c√≥digo deve ser bem comentado para explicar as partes importantes.
    * **Detalhes do C√≥digo**: Ap√≥s o bloco de c√≥digo, descreva em detalhes o que cada parte do c√≥digo faz, explicando a l√≥gica e as fun√ß√µes utilizadas.
    * **Documenta√ß√£o de Refer√™ncia**: Ao final, inclua uma se√ß√£o chamada "üìö Documenta√ß√£o de Refer√™ncia" com um link direto e relevante para a documenta√ß√£o oficial da Linguagem Python (docs.python.org) ou da biblioteca em quest√£o.
3.  **Clareza e Precis√£o**: Use uma linguagem clara. Evite jarg√µes desnecess√°rios. Suas respostas devem ser tecnicamente precisas.
"""

# Cria o conte√∫do da barra lateral no Streamlit
with st.sidebar:
    
    # Define o t√≠tulo da barra lateral
    st.title("ü§ñ DSA AI Coder")
    
    # Mostra um texto explicativo sobre o assistente
    st.markdown("Um assistente de IA focado em programa√ß√£o Python para ajudar iniciantes.")
    
    # Campo para inserir a chave de API da Groq
    groq_api_key = st.text_input(
        "Insira sua API Key Groq", 
        type="password",
        help="Obtenha sua chave em https://console.groq.com/keys"
    )

    # Adiciona linhas divis√≥rias e explica√ß√µes extras na barra lateral
    st.markdown("---")
    st.markdown("Desenvolvido para auxiliar em suas d√∫vidas de programa√ß√£o com Linguagem Python. IA pode cometer erros. Sempre verifique as respostas.")

    st.markdown("---")
    st.markdown("Conhe√ßa os Cursos Individuais, Forma√ß√µes e Programas de P√≥s-Gradua√ß√£o da DSA:")

    # Link para o site da DSA
    st.markdown("üîó [Data Science Academy](https://www.datascienceacademy.com.br)")
    
    # Bot√£o de link para enviar e-mail ao suporte da DSA
    st.link_button("‚úâÔ∏è E-mail Para o Suporte DSA no Caso de D√∫vidas", "mailto:suporte@datascienceacademy.com.br")

# T√≠tulo principal do app
st.title("Data Science Academy - DSA AI Coder")

# Subt√≠tulo adicional
st.title("Assistente Pessoal de Programa√ß√£o Python üêç")

# Texto auxiliar abaixo do t√≠tulo
st.caption("Fa√ßa sua pergunta sobre a Linguagem Python e obtenha c√≥digo, explica√ß√µes e refer√™ncias.")

# Inicializa o hist√≥rico de mensagens na sess√£o, caso ainda n√£o exista
if "messages" not in st.session_state:
    st.session_state.messages = []

# Exibe todas as mensagens anteriores armazenadas no estado da sess√£o
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# Inicializa a vari√°vel do cliente Groq como None
client = None

# Verifica se o usu√°rio forneceu a chave de API da Groq
if groq_api_key:
    
    try:
        
        # Cria cliente Groq com a chave de API fornecida
        client = Groq(api_key = groq_api_key)
    
    except Exception as e:
        
        # Exibe erro caso haja problema ao inicializar cliente
        st.sidebar.error(f"Erro ao inicializar o cliente Groq: {e}")
        st.stop()

# Caso n√£o tenha chave, mas j√° existam mensagens, mostra aviso
elif st.session_state.messages:
     st.warning("Por favor, insira sua API Key da Groq na barra lateral para continuar.")

# Captura a entrada do usu√°rio no chat
if prompt := st.chat_input("Qual sua d√∫vida sobre Python?"):
    
    # Se n√£o houver cliente v√°lido, mostra aviso e para a execu√ß√£o
    if not client:
        st.warning("Por favor, insira sua API Key da Groq na barra lateral para come√ßar.")
        st.stop()

    # Armazena a mensagem do usu√°rio no estado da sess√£o
    st.session_state.messages.append({"role": "user", "content": prompt})
    
    # Exibe a mensagem do usu√°rio no chat
    with st.chat_message("user"):
        st.markdown(prompt)

    # Prepara mensagens para enviar √† API, incluindo prompt de sistema
    messages_for_api = [{"role": "system", "content": CUSTOM_PROMPT}]
    for msg in st.session_state.messages:
        
        messages_for_api.append(msg)

    # Cria a resposta do assistente no chat
    with st.chat_message("assistant"):
        
        with st.spinner("Analisando sua pergunta..."):
            
            try:
                
                # Chama a API da Groq para gerar a resposta do assistente
                chat_completion = client.chat.completions.create(
                    messages = messages_for_api,
                    model = "openai/gpt-oss-20b", 
                    temperature = 0.7,
                    max_tokens = 2048,
                )
                
                # Extrai a resposta gerada pela API
                dsa_ai_resposta = chat_completion.choices[0].message.content
                
                # Exibe a resposta no Streamlit
                st.markdown(dsa_ai_resposta)
                
                # Armazena resposta do assistente no estado da sess√£o
                st.session_state.messages.append({"role": "assistant", "content": dsa_ai_resposta})

            # Caso ocorra erro na comunica√ß√£o com a API, exibe mensagem de erro
            except Exception as e:
                st.error(f"Ocorreu um erro ao se comunicar com a API da Groq: {e}")

st.markdown(
    """
    <div style="text-align: center; color: gray;">
        <hr>
        <p>DSA AI Coder - Parte Integrante do Curso Gratuito Fundamentos de Linguagem Python da Data Science Academy</p>
    </div>
    """,
    unsafe_allow_html=True
)

# Obrigado DSA



